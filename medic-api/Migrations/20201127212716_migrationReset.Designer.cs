// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using medic_api.DAL;

namespace medic_api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20201127212716_migrationReset")]
    partial class migrationReset
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("medic_api.DAL.Models.MedicalData", b =>
                {
                    b.Property<Guid>("MedicalDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<int>("Age")
                        .HasColumnName("age")
                        .HasColumnType("integer");

                    b.Property<int>("BloodPressure")
                        .HasColumnName("bloodpressure")
                        .HasColumnType("integer");

                    b.Property<double>("Bmi")
                        .HasColumnName("bmi")
                        .HasColumnType("double precision");

                    b.Property<double>("DiabetesPedigreeFunction")
                        .HasColumnName("diabetespedigreefunction")
                        .HasColumnType("double precision");

                    b.Property<int>("Glucose")
                        .HasColumnName("glucose")
                        .HasColumnType("integer");

                    b.Property<int>("Insulin")
                        .HasColumnName("insulin")
                        .HasColumnType("integer");

                    b.Property<bool?>("Prediction")
                        .HasColumnName("prediction")
                        .HasColumnType("boolean");

                    b.Property<int>("Pregnancies")
                        .HasColumnName("pregnancies")
                        .HasColumnType("integer");

                    b.Property<bool?>("Result")
                        .HasColumnName("result")
                        .HasColumnType("boolean");

                    b.Property<int>("SkinThickness")
                        .HasColumnName("skinthickness")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnName("userid")
                        .HasColumnType("uuid");

                    b.HasKey("MedicalDataId");

                    b.HasIndex("UserId");

                    b.ToTable("medicaldata");
                });

            modelBuilder.Entity("medic_api.DAL.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .HasColumnName("firstname")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnName("lastname")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnName("role")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnName("username")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("d7612574-c9e2-44ef-a205-534a014cca28"),
                            FirstName = "ChldCDmksoapL7JDnkb6cfgJLWw8aoNwQKJB7uOfcV+1y5FaZz7qht7+INjAhUx2Z3S6mJY/gMwnsL6ro8Wx98RxYQRRWxj9XaTHFVYQYPgJDhE+0/+2NrRdIkCQqK4OlDd3DUZYTAVzEkPU7h/0PS4Ee6pZeqkD33n+bWA1a7lfjeeys7OYBQtImVHF2eKGOA/ENQV1OeF98UCUBTKi18Gd6OjtoPugRelGuMvxTs2CFpzhzhBLNhsa6CP2iO21nXb8BQ0hTECpy1jIZ0ovi9aEJKRzDAEFQ9+CCBcW1yyfiK5bx9DQr1ak2PNwmNfYov3jD9LBLtY0s42sGP9Jpw==",
                            LastName = "C/yYBUWwputnk9bJnuqo2VdjZukl4S8OBjmUZhVipWWSxawLZ9YDEXroN3TpCLVcAB/z/MpEOTyANe/pqg9TzI2ds8Ljw8ueKwYVeO+tP+YWkAysGstNP210TkpRuDN1SWqdNHzHmoDNZngaWbhc/HWCj8eDAsr+9w3nqFAMwoGn8/HpbN4kdLlF5crnWVTRMZwGyJhjxpgeVJGdQOM85ncIWEC1djNKsgxsLb+Rutg7aOOxy/eF//yeJdMjrMwaVjCXl1uYkwieNhsX9D3XHGIenueNVtDHG4tEvxo5pZqi4k7IyuRdqZwrPp20UFyuefoIBbLj/dWeAoVClIM89g==",
                            Password = "apJAmHNc8LQ4bBOo9mGNVIpU5KxAAb6kBYi3Snnqzyo9msUl",
                            Role = "Admin",
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("medic_api.DAL.Models.MedicalData", b =>
                {
                    b.HasOne("medic_api.DAL.Models.User", "User")
                        .WithMany("MedicalDataset")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
